plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.cloud.tools.jib' version '3.4.2'
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
}

// === Repository config ===
repositories {
    mavenLocal()
    mavenCentral()
}

// === JAVA configuration ===
compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    otel
}

// === Properties ===

ext {
    otelVersion = '1.36.0'
    mainClassName = 'sample.Application'
}

// === Dependencies ===
dependencies {
    otel "io.opentelemetry.javaagent:opentelemetry-javaagent"

    implementation platform("io.opentelemetry:opentelemetry-bom:$otelVersion")

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation('io.opentelemetry:opentelemetry-api')
    implementation('io.opentelemetry:opentelemetry-sdk-extension-autoconfigure')

    runtimeOnly 'com.h2database:h2'

    //testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-parameters")
}

test {
    exclude '**/*IntegrationTest*'
}

tasks.register("integrationTest", Test) {
    group 'verification'
    include '**/*IntegrationTest*'
    it.mustRunAfter test
}

// ==== Run parameters

def env = [
    "OTEL_EXPORTER_OTLP_ENDPOINT": "http://localhost:4317",
    "OTEL_METRICS_EXPORTER"      : "otlp",
    "OTEL_LOGS_EXPORTER"         : "otlp",
    "OTEL_TRACES_EXPORTER"       : "otlp",
    "OTEL_SERVICE_NAME"          : project.name,
    "OTEL_RESOURCE_ATTRIBUTES"   : "service.version=" + project.version + ",deployment.environment=dev"
]


// ==== IDEA configuration ===

import org.gradle.internal.os.OperatingSystem
import org.jetbrains.gradle.ext.Application
import org.jetbrains.gradle.ext.JUnit

import static org.jetbrains.gradle.ext.ActionDelegationConfig.TestRunner.PLATFORM

idea.project.settings {
    compiler {
        javac {
            javacAdditionalOptions "-parameters"
        }
    }
    delegateActions {
        delegateBuildRunToGradle = false
        testRunner = PLATFORM
    }
    runConfigurations {
        "Application"(Application) {
            mainClass("$mainClassName")
            moduleRef(project,sourceSets.main)
//            jvmArgs("-javaagent:${configurations.otel.asPath}")
            envs(env)
            workingDirectory("\$MODULE_WORKING_DIR\$")
        }

        defaults(JUnit) {
        }
    }
}

// === Spring Boot Configuration ===
springBoot {
    mainClass = "$mainClassName"
    buildInfo {
        properties {
            time = null
        }
    }
}

bootRun {
//    jvmArgs("-javaagent:${configurations.otel.asPath}")
    environment(env)
}

// === Wrapper Configuration ===
wrapper {
    distributionType = Wrapper.DistributionType.ALL
}


bootBuildImage {
    verboseLogging = true

    //fix version of used images
    builder = 'paketobuildpacks/builder-jammy-base@sha256:9bb4d01f8d42ccb9aa3b6b10a5876c8913e3ba9709882f18c9bd8c54f46d862b'
    runImage = 'paketobuildpacks/run-jammy-base@sha256:8431203470391fc58454b71bdb917f53c20f403892fbb447f4ea5265a8d7cf49'
    environment = [
            "BPE_DELIM_JAVA_TOOL_OPTIONS"      : " ",
            "BPE_APPEND_JAVA_TOOL_OPTIONS"     : "-Dfile.encoding=UTF-8",
            "BP_SPRING_CLOUD_BINDINGS_DISABLED": "true",
    ]
    publish = false
}

jib {
    from {
        platforms {
            platform {
                architecture = "${OperatingSystem.current().getArch() == 'aarch64' ? 'arm64' : 'amd64'}"
                os = "${OperatingSystem.current().isWindows() ? 'windows' : 'linux'}"
            }
        }
    }
    to {
        image = "spring-playground"
    }
}
