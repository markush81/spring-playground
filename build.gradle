plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.3.0'
}

// === Repository config ===
repositories {
    mavenLocal()
    mavenCentral()
}

// === JAVA configuration ===
compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations{
    otel
}

// === Dependencies ===
dependencies {
    otel 'io.opentelemetry.javaagent:opentelemetry-javaagent:1.18.0'

    implementation platform("io.opentelemetry:opentelemetry-bom:1.18.0")
    implementation platform('io.opentelemetry:opentelemetry-bom-alpha:1.18.0-alpha')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation('io.opentelemetry:opentelemetry-api')
    implementation('io.opentelemetry:opentelemetry-sdk-extension-autoconfigure')

    runtimeOnly 'com.h2database:h2'

    //testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

test {
    exclude '**/*IntegrationTest*'
}

task integrationTest(type: Test) {
    group 'verification'
    include '**/*IntegrationTest*'
    it.mustRunAfter test
}

// === Spring Boot Configuration ===
springBoot {
	buildInfo()
}

bootRun {
    jvmArgs("-javaagent:${configurations.otel.asPath}")
    environment("OTEL_EXPORTER_OTLP_ENDPOINT","http://localhost:4317")
    environment("OTEL_METRICS_EXPORTER","otlp")
    environment("OTEL_LOGS_EXPORTER","otlp")
    environment("OTEL_TRACES_EXPORTER","otlp")
    environment("OTEL_SERVICE_NAME","${project.name}")
    environment("OTEL_RESOURCE_ATTRIBUTES","service.version=${project.version},deployment.environment=dev")
}

// === Wrapper Configuration ===
wrapper {
    distributionType = Wrapper.DistributionType.ALL
}


bootBuildImage {
    verboseLogging = false

    //fix version of used images
    builder = 'paketobuildpacks/builder@sha256:4797e9561534e3b628da62201555a3090db077266314e6fa175c2d9187f8429d'
    runImage = 'paketobuildpacks/run@sha256:781ccd109ecd2b800422697313035a2c37378ff26b6fa97d5205566197bcbb79'
    environment = [
            "BP_DEBUG_ENABLED"                     : "true",
            "BPE_DELIM_JAVA_TOOL_OPTIONS"          : " ",
            "BPE_JAVA_TOOL_OPTIONS"                : "-Dfile.encoding=UTF-8",
            "BPE_BPL_SPRING_CLOUD_BINDINGS_ENABLED": "false"
    ]
    publish = false
}

jib {
    to {
        image = "spring-playground"
    }
}
