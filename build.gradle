plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.3.0'
}

// === Repository config ===
repositories {
    mavenLocal()
    mavenCentral()
}

// === JAVA configuration ===
compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations {
    otel
}

// === Dependencies ===
dependencies {
    otel 'io.opentelemetry.javaagent:opentelemetry-javaagent:1.18.0'

    implementation platform("io.opentelemetry:opentelemetry-bom:1.18.0")
    implementation platform('io.opentelemetry:opentelemetry-bom-alpha:1.18.0-alpha')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation('io.opentelemetry:opentelemetry-api')
    implementation('io.opentelemetry:opentelemetry-sdk-extension-autoconfigure')

    runtimeOnly 'com.h2database:h2'

    //testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

test {
    exclude '**/*IntegrationTest*'
}

task integrationTest(type: Test) {
    group 'verification'
    include '**/*IntegrationTest*'
    it.mustRunAfter test
}

// === Spring Boot Configuration ===
springBoot {
    buildInfo {
        properties {
            time = null
        }
    }
}

bootRun {
//    jvmArgs("-javaagent:${configurations.otel.asPath}")
    environment("OTEL_EXPORTER_OTLP_ENDPOINT", "http://localhost:4317")
    environment("OTEL_METRICS_EXPORTER", "otlp")
    environment("OTEL_LOGS_EXPORTER", "otlp")
    environment("OTEL_TRACES_EXPORTER", "otlp")
    environment("OTEL_SERVICE_NAME", "${project.name}")
    environment("OTEL_RESOURCE_ATTRIBUTES", "service.version=${project.version},deployment.environment=dev")
}

// === Wrapper Configuration ===
wrapper {
    distributionType = Wrapper.DistributionType.ALL
}


bootBuildImage {
    verboseLogging = false

    //fix version of used images
    builder = 'paketobuildpacks/builder@sha256:fe33bca35ffe3c560b0a83e7a923ef51ac0b08c48d414d49523e6cc085f9a301'
    runImage = 'paketobuildpacks/run@sha256:94dcde503f31bfe2df0a06fe77c13af2adde688322f4c5e39142878b35b5ad66'
    environment = [
            "BPL_DEBUG_ENABLED"                 : "true",
            "BPE_DELIM_JAVA_TOOL_OPTIONS"       : " ",
            "BPE_APPEND_JAVA_TOOL_OPTIONS"      : "-Dfile.encoding=UTF-8",
            "BP_SPRING_CLOUD_BINDINGS_DISABLED" : "true",
            "BPL_SPRING_CLOUD_BINDINGS_DISABLED": "true"
    ]
    publish = false
}

jib {
//    from {
//        platforms {
//            platform {
//                architecture = "arm64"
//                os = "linux"
//            }
//        }
//    }
    to {
        image = "spring-playground"
    }
}
